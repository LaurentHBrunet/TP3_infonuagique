heat_template_version: 2014-10-16

description: A template to deploy a load balanced web server

parameters:

  image:
    type: string
    description: Image utilisee pour les serveurs
    default: xenial-server-cloudimg-amd64-disk1
    #A completer

  flavor:
    type: string
    description: Flavor utilisee par les serveurs
    default: 2048-10-1-1
    #A completer

  subnet_id:
    type: string
    description: Sous-reseau dans lequel le load balancer sera situe
    default: 4ba321db-9247-454b-9274-faad8ec76461

  net_id: 
    type: string
    description: Reseau
    default: 9ec556ab-d458-470e-96bc-1bab0ef66fb9
    #A completer

    # Vous pouvez ajouter d'autres paramètres
    # Il faut bien définir les descriptions, les valeurs par default et les contraintes

resources:
  server_nodes:
      type: OS::Heat::ResourceGroup
      properties:
        count: 3 #Crees 3 ressources (3 VM differentes)
        resource_def:
            type: OS::Nova::Server
            properties:
                # create a unique name for each server
                # using its index in the group
                name: my_server_%index% #Exemple de la documentation
                image: { get_param: image } 
                flavor: { get_param: flavor } 
                networks: 
                - network: { get_param: net_id}
                user_data_format: RAW
                user_data: |
                  #!/bin/bash
                  sudo -i
                  echo "update system because because python2.7 doesnt seem to be installed"
                  apt update
                  apt-get upgrade
                  echo "install python"
                  apt-get --assume-yes --fix-missing install python2.7
                  echo "check python2.7 version" 
                  python2.7 --version
                  echo "getting server.py"
                  wget https://raw.githubusercontent.com/houssemmh/INF8480-TP3/master/server.py
                  echo "starting server.py"
                  python2.7 server.py&
                  echo "server script started"
                  # ...

  myfloatingip:
      type: OS::Neutron::FloatingIP
      properties:
          floating_network: 1fa7fade-2722-4677-9e2b-da22d385202b
          port_id: { get_attr: [myloadbalancer, vip_port_id ]}


  poolmember1:
      type: OS::Neutron::LBaaS::PoolMember
      properties:
          address: { get_attr: [server_nodes, resource.0, first_address]}
          pool: { get_resource: mypool }
          protocol_port: 8080
          subnet: { get_param: subnet_id }


  poolmember2:
      type: OS::Neutron::LBaaS::PoolMember
      properties:
          address: { get_attr: [server_nodes, resource.1, first_address]}
          pool: { get_resource: mypool }
          protocol_port: 8080
          subnet: { get_param: subnet_id }


  poolmember3:
      type: OS::Neutron::LBaaS::PoolMember
      properties:
          address: { get_attr: [server_nodes, resource.2, first_address]}
          pool: { get_resource: mypool }
          protocol_port: 8080
          subnet: { get_param: subnet_id }

  mypool:
      type: OS::Neutron::LBaaS::Pool
      properties:
          listener: { get_resource: mylistener }
          lb_algorithm: ROUND_ROBIN #The algorithm used to distribute load between the members of the pool.
          protocol: HTTP #Protocol of the pool. Pas defini dans l'enonce
          loadbalancer: { get_resource: myloadbalancer }

  mylistener:
      type: OS::Neutron::LBaaS::Listener
      properties:
          protocol: HTTP
          protocol_port: 8080
          loadbalancer: { get_resource: myloadbalancer }

  myloadbalancer:
      type: OS::Neutron::LBaaS::LoadBalancer
      properties:
          vip_subnet: { get_param: subnet_id } #The name or ID of the subnet on which to allocate the VIP address.
                      #Value must be of type neutron.subnet

  mymonitor:
      type: OS::Neutron::LBaaS::HealthMonitor
      properties:
          delay: 15 #intervale 15 secondes pour verifier activite 
          max_retries: 2 #deux essaies avant que la machine soit considérée inactive
          pool: { get_resource: mypool }
          timeout: 5 #5 secondes vant de time out une requete s'il n'y a pas de reponse
          type: HTTP #Pas specifie dans enonce


outputs:
  pool_ip_address:
    value: {get_attr: [myloadbalancer, vip_address]}
    #value: {get_attr: [mypool, vip, address]}
    description: The IP address of the load balancing pool
